{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"src/index.js","sourcesContent":["import _ from 'lodash'\nimport Promise from 'bluebird'\nimport { Bacon } from 'sigh-core'\nimport { mapEvents, toFileSystemState } from 'sigh-core/lib/stream'\nimport {resolveImport} from \"./resolveImport\"\n\nfunction getImportsTask(opts) {\n  var Parser = require(\"css-modules-loader-core/lib/parser\");\n  var postcssModulesExtractImports = require(\"postcss-modules-extract-imports\");\n  var postcss = require(\"postcss\");\n\n  return event => {\n    var imports = [];\n    var parser = new Parser((path, relativeTo) => {\n      imports.push({path, relativeTo})\n      return {then: function() {}};\n    })\n    function captureImportsPlugin(css, result) {\n      return parser.fetchAllImports(css)\n    }\n    return postcss([postcssModulesExtractImports, captureImportsPlugin])\n        .process(event.data, {from: event.sourcePath, map: {inline: false}})\n        .then(({css, map}) => {\n          return {css, map, imports};\n        })\n  }\n}\n\nfunction cssmodulesTask(opts) {\n  // this function is called once for each subprocess in order to cache state,\n  // it is not a closure and does not have access to the surrounding state, use\n  // `require` to include any modules you need, for further info see\n  // https://github.com/ohjames/process-pool\n  // var log = require('sigh-core').log\n  // var Promise = require(\"bluebird\");\n  var Core = require(\"css-modules-loader-core\");\n  var core = new Core;\n  var Promise = require(\"bluebird\");\n  var resolveImport = require(\"./resolveImport\").resolveImport\n\n  // this task runs inside the subprocess to transform each event\n  return (cwd, event, imports) => {\n    if (Object.keys(imports).length > 0) {\n      console.log(\"here\");\n    }\n    function fetch(path, relativeTo) {\n      return core.load(imports[path + relativeTo], resolveImport(cwd, path, relativeTo), {}, fetch)\n          .then(({exportTokens}) => exportTokens)\n    }\n    return core.load(\n        event.data,\n        event.projectPath,\n        {},\n        (path, relativeTo) => core.load()\n    ).then(({injectableSource, exportTokens}) => {\n      if (Object.keys(imports).length > 0) {\n        console.log(\n            \"injectableSource\", injectableSource,\n            \"exportTokens\", exportTokens\n        )\n        process.exit(1)\n      }\n      return {\n        css: event.data\n      }\n    });\n  }\n}\n\nvar files = {};\nvar cwd = process.cwd();\n\nfunction getEvent(event) {\n  return _.pick(event, 'type', 'data', 'path', 'projectPath', 'sourcePath', '_basePath')\n}\n\nfunction getImportsForEvent(event, resolvedImports = {}) {\n\n}\n\nfunction adaptEvent(getImports, compiler) {\n  // data sent to/received from the subprocess has to be serialised/deserialised\n  return event => {\n    if (event.type !== 'add' && event.type !== 'change')\n      return event\n\n    if (event.fileType !== 'css') return event\n\n    return getImports(getEvent(event)).then(({css, map, imports}) => {\n      if (map) {\n        event.applySourceMap(map);\n      }\n      event.data = css;\n      // resolve imports\n      var resolvedImports = {};\n      for (let {path, relativeTo} of imports) {\n        let hash = path + relativeTo;\n        path = resolveImport(cwd, path, relativeTo);\n        resolvedImports[hash] = files[path];\n      }\n      return compiler(cwd, getEvent(event), resolvedImports).then(({css, map}) => {\n        event.data = css\n\n        if (map) {\n          event.applySourceMap(map)\n        }\n\n        // event.changeFileSuffix('newSuffix')\n        return event\n      })\n    })\n  }\n}\n\nvar pooledProc\nvar pooledGetImportsProc\n\nvar Core = require(\"css-modules-loader-core\");\nvar core = new Core;\n\nexport default function(op, opts = {}) {\n  // if (!pooledProc) {\n  //   pooledProc = op.procPool.prepare(cssmodulesTask, opts, { module })\n  // }\n  // if (!pooledGetImportsProc) {\n  //   pooledGetImportsProc = op.procPool.prepare(getImportsTask, opts, {module})\n  // }\n\n  var stream;\n  stream = mapEvents(op.stream, event => {\n    if (event.type === \"add\" || event.type === \"change\") {\n      files[event.sourcePath] = event.data\n    }\n    if (event.type === \"remove\") {\n      delete files[event.sourcePath]\n    }\n\n    return event;\n  })\n\n\n  var index = 0;\n  function pathFetcher(path, relativeTo, trace) {\n    var file = resolveImport(path, relativeTo)\n    if (!files[file]) {\n      file = file.replace(new RegExp('^/'), '');\n    }\n    if (!files[file]) {\n      throw new Error(`File ${path} not found (require at ${relativeTo})`)\n    }\n    return core.load(\n        files[file],\n        file,\n        index++,\n        pathFetcher\n    ).then(({injectableSource, exportTokens}) => {\n      return exportTokens;\n    })\n  }\n\n  return mapEvents(stream, event => {\n    if (event.fileType !== 'css') return event\n    if (event.type === \"add\" || event.type === \"change\") {\n      return core.load(\n        event.data,\n        event.sourcePath,\n        index++,\n        pathFetcher\n      ).then(({injectableSource, exportTokens}) => {\n        var lines = [];\n        _.each(exportTokens, (realClass, name) => {\n          lines.push(\"  \" + name + \": \" + realClass + \";\")\n        })\n        event.data = \":export {\\n\" + lines.join(\"\\n\") + \"\\n}\\n\" + injectableSource\n        return event;\n      })\n    } else {\n      return event;\n    }\n  });\n}\n"]}